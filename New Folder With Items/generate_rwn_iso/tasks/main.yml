---
# tasks file for generate_rwn_iso

- name: Create temporary download directory
  file:
    path: "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}"
    state: directory

- name: Download rhcos live iso file
  get_url:
    url: "{{ URL_MIRROR_DOWNLOAD_RHCOS_LIVE_ISO }}"
    dest: "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}/rhcos-live.x86_64.iso"
  when: download | bool == True
  register: http_reply

- debug:
     var: http_reply.status_code
  when: download | bool == True

- name: Get worker ignition file
  get_url:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER_DOWNLOAD_FILES }}?file_name=worker.ign"
    dest: "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}/worker.ign"
  register: http_reply

- name: Get cluster API virtual IP address
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}"
    method: GET
    status_code: [200]
    return_content: True
  register: http_reply

- debug:
    msg:
      - "Cluster api vip: {{ http_reply.json.api_vip }}"
  when: debug | bool == True

- name: Set cluster API properties
  set_fact:
    cluster_api_vip: "{{ http_reply.json.api_vip }}"

- name: Slurp worker ignition file
  slurp:
    src: "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}/worker.ign"
  register: worker_ignition_file

- name: Decode worker ignition file content
  set_fact:
    worker_ignition_decoded: "{{ worker_ignition_file['content'] | b64decode }}"

- debug:
    msg: "{{ worker_ignition_decoded }}"
  when: debug | bool == True

- debug:
    msg: "{{ worker_ignition_decoded.ignition.config.merge[0].source }}"
  when: debug | bool == True

- name: Extract the source
  set_fact:
   worker_ignition_config_source: "{{ worker_ignition_decoded.ignition.config.merge[0].source | replace( '/worker', '' ) }}"

- debug:
    var: worker_ignition_config_source
  when: debug | bool == True

- name: Load new worker ignition config source
  set_fact:
    patch_ignition_config_source: "{{ lookup('template', 'worker.ignition.j2') }}"

- name: Override worker ignition config source
  set_fact:
    worker_ignition_file: "{{ worker_ignition_decoded | combine ( patch_ignition_config_source, recursive=True ) | to_json | b64encode(encoding='utf-8') }}"

# - name: Load override script for nodeip configuration service
#   set_fact:
#     nodeip_config_service: "{{ lookup('template', 'nodeip-configuration.service.j2') }}"
#
# - debug:
#     var: nodeip_config_service
#   when: debug | bool == True

# - name: Load override ignition for nodeip configuration service
#   set_fact:
#     nodeip_config_ignition: "{{ lookup('template', 'nodeip-configuration.ignition.j2')}}"
#
# - debug:
#     var: nodeip_config_ignition
#   when: debug | bool == True

# - name: Combine override nodeip configuration service with worker ignition file
#   set_fact:
#     worker_ignition_file: "{{ worker_ignition_decoded | combine ( nodeip_config_ignition ) | to_json | b64encode(encoding='utf-8') }}"

- debug:
    var: worker_ignition_file
  when: debug | bool == True

- name: Load first boot script file content
  set_fact:
    boot_iso_script: "{{ lookup('file', 'live-iso.sh') | string | b64encode(encoding='utf-8') }}"

- name: Upload ISO ignition file after passing validation
  template:
    src: iso.ign.j2
    dest: "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}/iso.ign"
    validate: python3 -mjson.tool %s

- name: Generate iso file
  containers.podman.podman_container:
    name: coreos-installer
    image: quay.io/coreos/coreos-installer:release
    command: iso ignition embed -fi /data/iso.ign -o /data/worker.iso /data/rhcos-live.x86_64.iso
    state: present
    rm: yes
    recreate: no
    privileged: yes
    env_host: yes
    volumes:
      - /dev:/dev
      - /run/udev:/run/udev
      - "{{ DOWNLOAD_DEST_PATH }}/{{ CLUSTER_ID }}:/data"
  when: generate | bool == True

#TODO: Verify the iso file was genrated or exit here
